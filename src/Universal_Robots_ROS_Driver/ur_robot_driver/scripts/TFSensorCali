#!/usr/bin/env python

import sys
import rospy
import os
import actionlib
from std_msgs.msg import Float64MultiArray
from inverseKinematicsUR5 import InverseKinematicsUR5, transformRobotParameter
from control_msgs.msg import FollowJointTrajectoryAction, FollowJointTrajectoryGoal
from trajectory_msgs.msg import JointTrajectoryPoint
from controller_manager_msgs.srv import SwitchControllerRequest, SwitchController
from controller_manager_msgs.srv import LoadControllerRequest, LoadController
from controller_manager_msgs.srv import ListControllers, ListControllersRequest
import geometry_msgs.msg as geometry_msgs
import tf2_msgs.msg as tf2_msgs
import sensor_msgs.msg as sensor_msgs
import math
import numpy as np
from numpy import cos
from numpy import sin
from cartesian_control_msgs.msg import (
    FollowCartesianTrajectoryAction,
    FollowCartesianTrajectoryGoal,
    CartesianTrajectoryPoint,
)

# Compatibility for python2 and python3
if sys.version_info[0] < 3:
    input = raw_input

# If your robot description is created with a tf_prefix, those would have to be adapted
JOINT_NAMES = [
    "shoulder_pan_joint",
    "shoulder_lift_joint",
    "elbow_joint",
    "wrist_1_joint",
    "wrist_2_joint",
    "wrist_3_joint",
]

# All of those controllers can be used to execute joint-based trajectories.
# The scaled versions should be preferred over the non-scaled versions.
JOINT_TRAJECTORY_CONTROLLERS = [
    "scaled_pos_joint_traj_controller",
    "scaled_vel_joint_traj_controller",
    "pos_joint_traj_controller",
    "vel_joint_traj_controller",
    "forward_joint_traj_controller",
    "joint_group_vel_controller"
]

# All of those controllers can be used to execute Cartesian trajectories.
# The scaled versions should be preferred over the non-scaled versions.
CARTESIAN_TRAJECTORY_CONTROLLERS = [
    "pose_based_cartesian_traj_controller",
    "joint_based_cartesian_traj_controller",
    "forward_cartesian_traj_controller",
]

# We'll have to make sure that none of these controllers are running, as they will
# be conflicting with the joint trajectory controllers
CONFLICTING_CONTROLLERS = ["joint_group_vel_controller", "twist_controller"]

def qt2rot(q):
    #q:list
    [x,y,z,w] = q
    return np.array([[1-2*y*y-2*z*z, 2*x*y-2*z*w, 2*x*z+2*y*w],
             [2*x*y+2*z*w, 1-2*x*x-2*z*z, 2*y*z-2*x*w],
             [2*x*z-2*y*w, 2*y*z+2*x*w, 1-2*x*x-2*y*y]])


class TFSensorCali:
    def __init__(self):
        rospy.init_node("TFSensorCali")
        self.end_transl = np.zeros(3)
        self.end_rot = np.zeros(4)
        self.end_force = np.zeros(3)
        self.end_torque = np.zeros(3)
        timeout = rospy.Duration(10)
        self.switch_srv = rospy.ServiceProxy("controller_manager/switch_controller", SwitchController)
        self.load_srv = rospy.ServiceProxy("controller_manager/load_controller", LoadController)
        self.list_srv = rospy.ServiceProxy("controller_manager/list_controllers", ListControllers)
        self.js_topic = rospy.Subscriber("/joint_states", sensor_msgs.JointState, self.js_callback, queue_size=10)
        self.wrench_topic = rospy.Subscriber("/ethdaq_data", geometry_msgs.WrenchStamped, self.wrench_callback, queue_size=10)
        self.tf_topic = rospy.Subscriber("/tf", tf2_msgs.TFMessage, self.tf_callback, queue_size=10)
        try:
            self.switch_srv.wait_for_service(timeout.to_sec())
        except rospy.exceptions.ROSException as err:
            rospy.logerr("Could not reach controller switch service. Msg: {}".format(err))
            sys.exit(-1)
        self.joint_trajectory_controller = "scaled_pos_joint_traj_controller"

        while not self.switch_controller(self.joint_trajectory_controller):
            rospy.loginfo("starting position controller......")
        rospy.loginfo("starting controller succeed!")


    def switch_controller(self, target_controller):
        """Activates the desired controller and stops all others from the predefined list above"""
        
        target_loaded_flag = 0
        target_start_flag = 0
        other_controllers = (
            JOINT_TRAJECTORY_CONTROLLERS
            + CARTESIAN_TRAJECTORY_CONTROLLERS
            + CONFLICTING_CONTROLLERS
        )
        other_controllers.remove(target_controller)
        srv = ListControllersRequest()
        response = self.list_srv(srv)
        for controller in response.controller:
            if controller.name == target_controller:
                target_loaded_flag = 1
                if controller.state == "running":
                    target_start_flag = 1
            else:
                if not controller.state == "running":
                    other_controllers.remove(controller.name)

        if target_loaded_flag == 0:
            srv = LoadControllerRequest()
            srv.name = target_controller
            self.load_srv(srv)

        srv = SwitchControllerRequest()
        srv.stop_controllers = other_controllers
        if target_start_flag == 0:
            srv.start_controllers = [target_controller]
        else:
            srv.start_controllers = []
        srv.strictness = SwitchControllerRequest.BEST_EFFORT
        self.switch_srv(srv)

        srv = ListControllersRequest()
        response = self.list_srv(srv)
        for controller in response.controller:
            if controller.name == target_controller and controller.state == "running":
                return 1
        return 0


    def tf_callback(self,end_tf):
        if end_tf.transforms[0].child_frame_id == "tool0_controller":
            self.end_transl[0] = end_tf.transforms[0].transform.translation.x
            self.end_transl[1] = end_tf.transforms[0].transform.translation.y
            self.end_transl[2] = end_tf.transforms[0].transform.translation.z
            self.end_rot[0] = end_tf.transforms[0].transform.rotation.x
            self.end_rot[1] = end_tf.transforms[0].transform.rotation.y
            self.end_rot[2] = end_tf.transforms[0].transform.rotation.z
            self.end_rot[3] = end_tf.transforms[0].transform.rotation.w

    def wrench_callback(self,end_wrench):
        self.end_force[0] = end_wrench.wrench.force.x
        self.end_force[1] = end_wrench.wrench.force.y
        self.end_force[2] = end_wrench.wrench.force.z
        self.end_torque[0] = end_wrench.wrench.torque.x
        self.end_torque[1] = end_wrench.wrench.torque.y
        self.end_torque[2] = end_wrench.wrench.torque.z

    def js_callback(self,joint_states):
        self.jsp = joint_states.position
        self.jsv = joint_states.velocity
        self.jse = joint_states.effort

    def calibration(self):
        rate = rospy.Rate(250)
        
        trajectory_client = actionlib.SimpleActionClient(
            "{}/follow_joint_trajectory".format(self.joint_trajectory_controller),
            FollowJointTrajectoryAction,
        )
        timeout = rospy.Duration(5)
        if not trajectory_client.wait_for_server(timeout):
            rospy.logerr("Could not reach controller action server.")
            sys.exit(-1)

        rospy.loginfo("step one")
        goal = FollowJointTrajectoryGoal()
        goal.trajectory.joint_names = JOINT_NAMES
        point = JointTrajectoryPoint()
        point.positions = [0, -np.pi/2, -np.pi/2, -np.pi/2, np.pi/2, 0]
        point.time_from_start = rospy.Duration(10)
        goal.trajectory.points.append(point)
        # final_pose = np.zeros((4,4))
        # final_pose[0:3,3] = np.asarray([self.end_transl[0],self.end_transl[1],self.end_transl[2]])
        # final_pose[0:3,0:3] = qt2rot([0.7071068, -0.7071068, 0, 0])
        # final_pose[3,0:4] = np.asarray([0,0,0,1])
        # get_traj_result = self.get_trajectory(self.jsp, final_pose)
        # for i in range(get_traj_result[0]):
        #     point = JointTrajectoryPoint()
        #     point.positions = get_traj_result[1][i]
        #     point.time_from_start = get_traj_result[2][i]
        #     goal.trajectory.points.append(point)
        trajectory_client.send_goal(goal)
        trajectory_client.wait_for_result()
        result = trajectory_client.get_result()
        rospy.sleep(5)
        # while np.linalg.norm(self.end_rot - np.asarray([0,0,0,1])) > 0.001:
        #     pass
        Fx_sum = 0
        Fy_sum = 0
        Fz_sum = 0
        Tx_sum = 0
        Ty_sum = 0
        Tz_sum = 0
        for i in range(1000):
            Fx_sum = Fx_sum + self.end_force[0]
            Fy_sum = Fy_sum + self.end_force[1]
            Fz_sum = Fz_sum + self.end_force[2]
            Tx_sum = Tx_sum + self.end_torque[0]
            Ty_sum = Ty_sum + self.end_torque[1]
            Tz_sum = Tz_sum + self.end_torque[2]
            rate.sleep()
        Fx1 = Fx_sum/1000.0
        Fy1 = Fy_sum/1000.0
        Fz1 = Fz_sum/1000.0
        Tx1 = Tx_sum/1000.0
        Ty1 = Ty_sum/1000.0
        Tz1 = Tz_sum/1000.0

    
        rospy.loginfo("step two")
        goal = FollowJointTrajectoryGoal()
        goal.trajectory.joint_names = JOINT_NAMES
        point = JointTrajectoryPoint()
        point.positions = [0, -np.pi/2, -np.pi/2, -np.pi, np.pi/2, 0]
        point.time_from_start = rospy.Duration(10)
        goal.trajectory.points.append(point)
        # final_pose = np.zeros((4,4))
        # final_pose[0:3,3] = np.asarray([self.end_transl[0],self.end_transl[1],self.end_transl[2]])
        # final_pose[0:3,0:3] = qt2rot([0.5, -0.5, -0.5, 0.5])
        # final_pose[3,0:4] = np.asarray([0,0,0,1])
        # get_traj_result = self.get_trajectory(self.jsp, final_pose)
        # for i in range(get_traj_result[0]):
        #     point = JointTrajectoryPoint()
        #     point.positions = get_traj_result[1][i]
        #     point.time_from_start = get_traj_result[2][i]
        #     goal.trajectory.points.append(point)
        trajectory_client.send_goal(goal)
        trajectory_client.wait_for_result()
        result = trajectory_client.get_result()
        rospy.sleep(5)

        # while np.linalg.norm(self.end_rot - np.asarray([0,0,0,1])) > 0.001:
        #     pass
        Fx_sum = 0
        Fy_sum = 0
        Fz_sum = 0
        Tx_sum = 0
        Ty_sum = 0
        Tz_sum = 0
        for i in range(1000):
            Fx_sum = Fx_sum + self.end_force[0]
            Fy_sum = Fy_sum + self.end_force[1]
            Fz_sum = Fz_sum + self.end_force[2]
            Tx_sum = Tx_sum + self.end_torque[0]
            Ty_sum = Ty_sum + self.end_torque[1]
            Tz_sum = Tz_sum + self.end_torque[2]
            rate.sleep()
        Fx2 = Fx_sum/1000.0
        Fy2 = Fy_sum/1000.0
        Fz2 = Fz_sum/1000.0
        Tx2 = Tx_sum/1000.0
        Ty2 = Ty_sum/1000.0
        Tz2 = Tz_sum/1000.0

        rospy.loginfo("step three")
        goal = FollowJointTrajectoryGoal()
        goal.trajectory.joint_names = JOINT_NAMES
        point = JointTrajectoryPoint()
        point.positions = [0, -np.pi/2, -np.pi/2, -np.pi, np.pi/2, np.pi/2]
        point.time_from_start = rospy.Duration(10)
        goal.trajectory.points.append(point)
        # final_pose = np.zeros((4,4))
        # final_pose[0:3,3] = np.asarray([self.end_transl[0],self.end_transl[1],self.end_transl[2]])
        # final_pose[0:3,0:3] = qt2rot([0, -0.7071068, 0, 0.7071068])
        # final_pose[3,0:4] = np.asarray([0,0,0,1])
        # get_traj_result = self.get_trajectory(self.jsp, final_pose)
        # for i in range(get_traj_result[0]):
        #     point = JointTrajectoryPoint()
        #     point.positions = get_traj_result[1][i]
        #     point.time_from_start = get_traj_result[2][i]
        #     goal.trajectory.points.append(point)
        trajectory_client.send_goal(goal)
        trajectory_client.wait_for_result()
        result = trajectory_client.get_result()
        rospy.sleep(5)
        # while np.linalg.norm(self.end_rot - np.asarray([0,0,0,1])) > 0.001:
        #     pass
        Fx_sum = 0
        Fy_sum = 0
        Fz_sum = 0
        Tx_sum = 0
        Ty_sum = 0
        Tz_sum = 0
        for i in range(1000):
            Fx_sum = Fx_sum + self.end_force[0]
            Fy_sum = Fy_sum + self.end_force[1]
            Fz_sum = Fz_sum + self.end_force[2]
            Tx_sum = Tx_sum + self.end_torque[0]
            Ty_sum = Ty_sum + self.end_torque[1]
            Tz_sum = Tz_sum + self.end_torque[2]
            rate.sleep()
        Fx3 = Fx_sum/1000.0
        Fy3 = Fy_sum/1000.0
        Fz3 = Fz_sum/1000.0
        Tx3 = Tx_sum/1000.0
        Ty3 = Ty_sum/1000.0
        Tz3 = Tz_sum/1000.0


        f_offset = [(Fx1 + Fx2)/2.0, (Fy1 + Fy3)/2.0, (Fz2 + Fz3)/2.0]
        t_offset = [Tx3, Ty2, Tz1]
        grav = (f_offset[0] - Fx3 + f_offset[1] - Fy2 - f_offset[2] + Fz1)/3.0
        gcp = [-(Ty1 - t_offset[1] + Tz2 - t_offset[2])/2.0/grav, (Tx1 - t_offset[0] + Tz3 - t_offset[2])/2.0/grav, (Tx2 - t_offset[0] - Ty3 + t_offset[1])/2.0/grav]
        rospy.loginfo("write file")
        print(f_offset)
        print(t_offset)
        print(grav)
        print(gcp)

        with open('TFSensorCaliData','w') as califile:
            califile.write(' '.join(map(str,f_offset))+'\n')
            califile.write(' '.join(map(str,t_offset))+'\n')
            califile.write(str(grav)+'\n')
            califile.write(' '.join(map(str,gcp))+'\n')

    def get_trajectory(self,start_js,final_pose):
        theta0 = [start_js[2],start_js[1],start_js[0],start_js[3],start_js[4],start_js[5]]
        joint_weights = [10,8,8,2,2,1]
        ik = InverseKinematicsUR5()
        ik.setJointWeights(joint_weights)
        ik.setJointLimits(-np.pi, np.pi)
        best_config = ik.findClosestIK(final_pose,theta0)
        t_max = int(np.max(np.abs(best_config-theta0))/0.01)
        duration_list = []
        position_list = []
        for i in range(t_max):
            duration_list.append(rospy.Duration((i+1))/5.0)
            position_list.append((best_config-theta0)/t_max*(i+1)+theta0)
        return [t_max,position_list,duration_list]


cali = TFSensorCali()
cali.calibration()
